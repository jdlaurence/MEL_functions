/*

Import Hulls (endocasts generated by MATLAB). This is just a new version of the original impHulls script,
but in this version there's no overwrite, and the user has the option to name their endocast upon import.

  Revised by J.D. Laurence-Chasen
  on 2/19/2020
*/  



global proc impHullsNew()
{
    int $height = 160;
    int $width = 500;

    if (`window -exists impHullsWindow` == true) deleteUI impHulls;  
    
    string $mainWindow = `window -title "Import Dynamic Endocast"-menuBar true
    -maximizeButton false -minimizeButton true -sizeable true -resizeToFitChildren false
    impHullsWindow`;
    
    frameLayout -label "Import hulls (.OBJ series)" -height $height -width $width -mw 5 -mh 4;
    columnLayout;
        textFieldGrp -label "Name" -text "AlphaHulls1" -cw 1 40 -cl2 "left" "left" HullNameUI;   
        button	-label "Select OBJs" -enable 1 -w ($width) -command importHulls;
        button	-label "Close" -w ($width) closeButton;
        button -edit -command "deleteUI impHullsWindow" closeButton;
    
    showWindow $mainWindow;
    window -e -width $width -height $height $mainWindow;
}


global proc importHulls(){

//script should:
	//1. import obj file
	//2. set keys so each obj is only visible for its frame
	//3. group all obj files, create “volume” attribute for group, key volume values at each frame

string $hullname = `textFieldGrp -q -text HullNameUI` ; // Hull name
string $fileList[] = getXrommPointfiles("import .obj files",4,"OBJ files (*.obj)",1) ; // OBJ filenames

//create locator for volume data
string $volloc = ($hullname + "_Volume") ; // locator name
spaceLocator -n $volloc ;
addAttr -ln "Volume"  -at double  -dv 0 $volloc ;
setAttr -e-keyable true ($volloc + ".Volume") ;


// Importing obj files
// (copied from impObjs.mel)
for ($file in $fileList)
    {   	
    	// create a name for the new object and make sure its valid
    	string $objname = basename($file,".obj");
    	$objname = cleanStrForObjectName($objname);
        string $newObjs[] = `file -import -type "OBJ" -ra  0 -rnn -options "mo=0" -loadReferenceDepth "all" $file`;
        string $justTforms[] = `ls -tr $newObjs`;
        rename  $justTforms[0] $objname;

	$fileId = fopen($file, "r") ;
	float $volumeHull ;
	int $frameNumber ;
	for ($i = 1; $i < 4; $i++)
	{
		string $line = `fgetline $fileId`;
		if( $i == 2)
			{
			$volumeHull = $line ;
			}
		else if ($i == 3)
			{
			$frameNumber = $line ;
			}
		else
			;
	} 
	fclose $fileId ;
	
	// key volume value
	currentTime -edit $frameNumber ;
	select -r $volloc ;
	setKeyframe -at Volume -v $volumeHull -t $frameNumber $volloc ;
	// print ("frame "+$frameNumber +": volume = "+$volumeHull +"\n");

	//key visibility of hull objs
	string $selectedHull[];
	select -r ("|Alpha_" + $frameNumber + "_Hull");
	$selectedHull = `ls -sl` ;
	int $prevFrame = $frameNumber-1 ;
	int $nextFrame = $frameNumber+1 ;
	currentTime -edit $prevFrame ;
	setAttr ("|Alpha_" + $frameNumber + "_Hull.visibility") 0;
	setKeyframe $selectedHull ;
	currentTime -edit $frameNumber ;
	setKeyframe -v 1 -at visibility $selectedHull ;
	currentTime -edit $nextFrame ;
	setAttr ("|Alpha_" + $frameNumber + "_Hull.visibility") 0;
	setKeyframe $selectedHull ;

    }
//create group for hull objs

string $selectedObjects[] ;
select -r "Alpha*" ;
if (`objExists "AlphaHulls*"`) { 
	select -d -hi "AlphaHulls*" ; // deselect existing alpha hull groups
}
$selectedObjects = `ls -sl` ;
group -n $hullname $selectedObjects ;

}
