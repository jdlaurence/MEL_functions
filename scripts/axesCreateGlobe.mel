/* global proc string axesCreateGlobe(string $name, float $size)

    Input:  $name = name for the axis. 
            $size = length of each axis. 
            	
	Output: name of the created object or top node of the group if not single object.
	
	Creates an object representing a right handed coordinate system.
	Written by David Baier 7/26/2016
	
	Modified by J.D. Laurence-Chasen 3/26/2020
	
*/
global proc string axesCreateGlobe(string $name, float $size)
{ 
    string $output;
    axesShaderMake;
    float $cylLen = $size*0.9;
	float $ycylLen = $size;
	float $zcylLen = $size;
    float $coneLen = $size*0.1;
    float $cylRad = $size*0.01;
    float $coneRad = $size*0.02;
    
    // axes cylinders
    string $xAxisName[] = `polyCylinder -axis 1 0 0 -h $cylLen -r $cylRad -n ($name+"X")`;
        sets -e -forceElement xShaderSG;
                xform -piv (($coneLen)/2) 0 0 $xAxisName[0]; move -a -x (-1*($coneLen)/2);
        
    string $yAxisName[] = `polyCylinder -axis 0 1 0 -h $ycylLen -r $cylRad -n ($name+"Y")`;
        sets -e -forceElement yShaderSG;
        
       // xform -piv 0 (($coneLen)/2) 0 $yAxisName[0]; move -a -y (-1*($coneLen)/2);
    
    string $zAxisName[] = `polyCylinder -axis 0 0 1 -h $zcylLen -r $cylRad -n ($name+"Z")`;
        sets -e -forceElement zShaderSG;
        
       // xform -piv 0 0 (($coneLen)/2) $zAxisName[0]; move -a -z (-1*($coneLen)/2);
        
    // axes cones
    string $xConeName[] = `polyCone -n ($name+"Xarrow") -r $coneRad -h $coneLen -ax 1 0 0`;
        sets -e -forceElement xShaderSG;
        
        xform -piv (-1*($coneLen)/2) 0 0 $xConeName[0]; move -a -x ($cylLen/2);
             

// cone tip
polyCylinder -h 0.1 -r 0.01 -n "xAxisTip";
xform -rotation 90 0 0 -translation 1 0 0;sets -e -forceElement xShaderSG;

   	
            parent $xConeName[0] $xAxisName[0];
		parent xAxisTip $xAxisName[0];
            $output = `group -em -n ($name)`;
            parent $xAxisName[0]  $yAxisName[0]  $zAxisName[0] $output;
            
            // add thickness control 1/3/2018
            addAttr -ln "axThickness"  -at double  -dv 1 $output;
            setAttr -e-keyable true ($output+".axThickness");
            connectAttr -f ($output+".axThickness") ($xAxisName[0]+".scaleY");
            connectAttr -f ($output+".axThickness") ($xAxisName[0]+".scaleZ");
            connectAttr -f ($output+".axThickness") ($yAxisName[0]+".scaleX");
            connectAttr -f ($output+".axThickness") ($yAxisName[0]+".scaleZ");
            connectAttr -f ($output+".axThickness") ($zAxisName[0]+".scaleY");
            connectAttr -f ($output+".axThickness") ($zAxisName[0]+".scaleX");
            select $output;
    return $output;
}
